name: CI / CD (no third-party actions)

on:
  push:
    branches: [ main ]

defaults:
  run:
    shell: bash

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ramsrib/pgvector
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Explicitly ensure pytest is present
          pip install pytest

      # 1) Write the dev .env into runner env
      - name: Export dev .env
        run: |
          echo "$DEV_DOTENV" > .env

          # Promote every KEY=value pair to future steps via $GITHUB_ENV
          while IFS= read -r line || [ -n "$line" ]; do
            [[ "$line" =~ ^[[:space:]]*$ ]] && continue        # skip blanks
            [[ "$line" =~ ^[[:space:]]*# ]] && continue        # skip comments
            [[ "$line" != *"="* ]] && { echo "Malformed .env line: $line" >&2; exit 1; }
            echo "$line" >> "$GITHUB_ENV"
          done
        env:
          DEV_DOTENV: ${{ secrets.DEV_DOTENV }}

      # 2) Run test suite with explicitly set DJANGO_SETTINGS_MODULE
      - name: Run tests
        env:
          TEST_MODE: "True"
        run: |
          export DJANGO_SETTINGS_MODULE=hood_united.settings
          # Ensure SECRET_KEY is never empty in CI
          export SECRET_KEY=${SECRET_KEY:-dummy-test-secret}
          # Mock OpenAI API key for tests
          export OPENAI_API_KEY=dummy-key-for-testing
          # Postgres connection for tests
          export DB_NAME=test_db
          export DB_USER=test_user
          export DB_PASSWORD=test_password
          export DB_HOST=localhost
          export DB_PORT=5432
          python -m pytest

  deploy-prod:
    needs: build-test
    runs-on: ubuntu-latest
    environment: production           # approval & prod secrets gate
    steps:
      - uses: actions/checkout@v4

      - name: Build config.env           # replaces old Build‑config.json step 
        run: |
          mkdir -p build
          : > build/config.env           # truncate / create file
          # list every prod variable that must travel
          for var in SECRET_KEY DEBUG OPENAI_KEY ASSISTANT_ID SPOONACULAR_API_KEY \
                     STRIPE_PUBLIC_KEY STRIPE_SECRET_KEY STRIPE_WEBHOOK_SECRET \
                     EMAIL_BACKEND EMAIL_HOST EMAIL_PORT EMAIL_USE_TLS \
                     EMAIL_HOST_USER EMAIL_HOST_PASSWORD DEFAULT_FROM_EMAIL \
                     ELASTIC_API_KEY STREAMLIT_URL STREAMLIT_SUPPORT_EMAIL \
                     KROGER_CLIENT_ID KROGER_CLIENT_SECRET \
                     DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT \
                     AZURE_ACCOUNT_KEY AZURE_ACCOUNT_NAME AZURE_CONTAINER \
                     N8N_PW_RESET_URL N8N_UPDATE_PROFILE_URL N8N_REGISTER_URL \
                     N8N_GENERATE_INSTRUCTIONS_URL N8N_GENERATE_SHOPPING_LIST_URL \
                     N8N_GENERATE_APPROVAL_EMAIL_URL N8N_SEND_BULK_PREP_EMAIL_URL \
                     N8N_SEND_FOLLOW_UP_EMAIL_URL N8N_RESEND_URL N8N_SEND_REMINDER_EMAIL_URL \
                     N8N_SEND_SYSTEM_UPDATE_EMAIL_URL N8N_GENERATE_EMERGENCY_LIST_URL \
                     N8N_PAYMENT_LINK_WEBHOOK_URL CELERY_BROKER_URL CELERY_RESULT_BACKEND \
                     DJANGO_URL YOUTUBE_API_KEY PLACES_API_KEY GOOGLE_API_KEY \
                     GUEST_PROMPT_TEMPLATE AUTH_PROMPT_TEMPLATE \
                     GPT41_AUTH_LIMIT GPT41_MINI_GUEST_LIMIT; do
              printf '%s="%s"\n' "$var" "${!var}" >> build/config.env
          done
        env:
          SECRET_KEY:               ${{ secrets.SECRET_KEY }}
          DEBUG:                    ${{ secrets.DEBUG }}
          OPENAI_KEY:               ${{ secrets.OPENAI_KEY }}
          ASSISTANT_ID:             ${{ secrets.ASSISTANT_ID }}
          SPOONACULAR_API_KEY:      ${{ secrets.SPOONACULAR_API_KEY }}
          STRIPE_PUBLIC_KEY:        ${{ secrets.STRIPE_PUBLIC_KEY }}
          STRIPE_SECRET_KEY:        ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET:    ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          EMAIL_BACKEND:            ${{ secrets.EMAIL_BACKEND }}
          EMAIL_HOST:               ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT:               ${{ secrets.EMAIL_PORT }}
          EMAIL_USE_TLS:            ${{ secrets.EMAIL_USE_TLS }}
          EMAIL_HOST_USER:          ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD:      ${{ secrets.EMAIL_HOST_PASSWORD }}
          DEFAULT_FROM_EMAIL:       ${{ secrets.DEFAULT_FROM_EMAIL }}
          ELASTIC_API_KEY:          ${{ secrets.ELASTIC_API_KEY }}
          STREAMLIT_URL:            ${{ secrets.STREAMLIT_URL }}
          STREAMLIT_SUPPORT_EMAIL:  ${{ secrets.STREAMLIT_SUPPORT_EMAIL }}
          KROGER_CLIENT_ID:         ${{ secrets.KROGER_CLIENT_ID }}
          KROGER_CLIENT_SECRET:     ${{ secrets.KROGER_CLIENT_SECRET }}
          DB_NAME:                  ${{ secrets.DB_NAME }}
          DB_USER:                  ${{ secrets.DB_USER }}
          DB_PASSWORD:              ${{ secrets.DB_PASSWORD }}
          DB_HOST:                  ${{ secrets.DB_HOST }}
          DB_PORT:                  ${{ secrets.DB_PORT }}
          AZURE_ACCOUNT_KEY:        ${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_ACCOUNT_NAME:       ${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_CONTAINER:          ${{ secrets.AZURE_CONTAINER_NAME }}
          N8N_PW_RESET_URL:         ${{ secrets.N8N_PW_RESET_URL }}
          N8N_UPDATE_PROFILE_URL:   ${{ secrets.N8N_UPDATE_PROFILE_URL }}
          N8N_REGISTER_URL:         ${{ secrets.N8N_REGISTER_URL }}
          N8N_GENERATE_INSTRUCTIONS_URL:       ${{ secrets.N8N_GENERATE_INSTRUCTIONS_URL }}
          N8N_GENERATE_SHOPPING_LIST_URL:      ${{ secrets.N8N_GENERATE_SHOPPING_LIST_URL }}
          N8N_GENERATE_APPROVAL_EMAIL_URL:     ${{ secrets.N8N_GENERATE_APPROVAL_EMAIL_URL }}
          N8N_SEND_BULK_PREP_EMAIL_URL:        ${{ secrets.N8N_SEND_BULK_PREP_EMAIL_URL }}
          N8N_SEND_FOLLOW_UP_EMAIL_URL:        ${{ secrets.N8N_SEND_FOLLOW_UP_EMAIL_URL }}
          N8N_RESEND_URL:                      ${{ secrets.N8N_RESEND_URL }}
          N8N_SEND_REMINDER_EMAIL_URL:         ${{ secrets.N8N_SEND_REMINDER_EMAIL_URL }}
          N8N_SEND_SYSTEM_UPDATE_EMAIL_URL:    ${{ secrets.N8N_SEND_SYSTEM_UPDATE_EMAIL_URL }}
          N8N_GENERATE_EMERGENCY_LIST_URL:     ${{ secrets.N8N_GENERATE_EMERGENCY_LIST_URL }}
          N8N_PAYMENT_LINK_WEBHOOK_URL:        ${{ secrets.N8N_PAYMENT_LINK_WEBHOOK_URL }}
          CELERY_BROKER_URL:        ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND:    ${{ secrets.CELERY_RESULT_BACKEND }}
          DJANGO_URL:               ${{ secrets.DJANGO_URL }}
          YOUTUBE_API_KEY:          ${{ secrets.YOUTUBE_API_KEY }}
          PLACES_API_KEY:           ${{ secrets.PLACES_API_KEY }}
          GOOGLE_API_KEY:           ${{ secrets.GOOGLE_API_KEY }}
          GUEST_PROMPT_TEMPLATE:    ${{ secrets.GUEST_PROMPT_TEMPLATE }}
          AUTH_PROMPT_TEMPLATE:     ${{ secrets.AUTH_PROMPT_TEMPLATE }}
          GPT41_AUTH_LIMIT:         ${{ secrets.GPT41_AUTH_LIMIT }}
          GPT41_MINI_GUEST_LIMIT:   ${{ secrets.GPT41_MINI_GUEST_LIMIT }}

      # 2) Push code and config to VM
      - name: Debug SSH connectivity
        run: |
          # Prepare key and known_hosts exactly as in the deploy step
          echo "$SSH_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Install basic network‑diagnostic tools (traceroute & netcat)
          sudo apt-get update -y
          sudo apt-get install -y traceroute netcat-openbsd

          echo "▶️  Attempting verbose SSH connection test…"
          ssh -vvv -o ConnectTimeout=15 -i /tmp/deploy_key "$SSH_USER@$SSH_HOST" "echo '✅ SSH connection successful'" || echo "❌ SSH connection failed"

          echo "▶️  Testing port 22 with netcat…"
          nc -vz "$SSH_HOST" 22 || echo "❌ Port 22 unreachable"

          echo "▶️  Traceroute to host…"
          traceroute -m 20 "$SSH_HOST" || true
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Get changed files
        id: changed
        run: |
          git fetch --depth=2 origin $GITHUB_REF
          git diff --name-only "$GITHUB_SHA" "${{ github.event.before }}" > changed_files.txt
          echo build/config.env >> changed_files.txt

      - name: Rsync to Azure VM
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

          # Ensure the SSH config directory exists for the runner
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add host key to known_hosts to stop MITM
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          rsync -avz --files-from=changed_files.txt \
            -e "ssh -i /tmp/deploy_key" \
            ./ $SSH_USER@$SSH_HOST:/var/www/myapp

          ssh -i /tmp/deploy_key $SSH_USER@$SSH_HOST "
            sudo cp /var/www/myapp/build/config.env /var/www/myapp/config.env
            sudo chown $SSH_USER:$SSH_USER /var/www/myapp/config.env
            sudo chmod 600 /var/www/myapp/config.env
            sudo systemctl restart apache2
          "
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
