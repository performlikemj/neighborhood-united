name: CI / CD (no third-party actions)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ramsrib/pgvector
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Explicitly ensure pytest is present
          pip install pytest

      # 1) Write the dev .env into runner env
      - name: Export dev .env
        run: |
          echo "$DEV_DOTENV" > .env

          # Promote every KEY=value pair to future steps via $GITHUB_ENV
          while IFS= read -r line || [ -n "$line" ]; do
            [[ "$line" =~ ^[[:space:]]*$ ]] && continue        # skip blanks
            [[ "$line" =~ ^[[:space:]]*# ]] && continue        # skip comments
            [[ "$line" != *"="* ]] && { echo "Malformed .env line: $line" >&2; exit 1; }
            echo "$line" >> "$GITHUB_ENV"
          done
        env:
          DEV_DOTENV: ${{ secrets.DEV_DOTENV }}

      # 2) Run test suite with explicitly set DJANGO_SETTINGS_MODULE
      - name: Run checks and tests
        env:
          TEST_MODE: "True"
        run: |
          export DJANGO_SETTINGS_MODULE=hood_united.settings
          # Ensure SECRET_KEY is never empty in CI
          export SECRET_KEY=${SECRET_KEY:-dummy-test-secret}
          # Mock OpenAI API key for tests
          export OPENAI_API_KEY=dummy-key-for-testing
          # Postgres connection for tests
          export DB_NAME=test_db
          export DB_USER=test_user
          export DB_PASSWORD=test_password
          export DB_HOST=localhost
          export DB_PORT=5432
          export ALLOWED_HOSTS="*"
          # Django checks before tests
          python manage.py makemigrations --check --dry-run
          python manage.py migrate --noinput
          python manage.py check
          python -m pytest
