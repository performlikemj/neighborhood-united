"""
Django settings for hood_united project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from dotenv import load_dotenv
from datetime import timedelta

# Load environment variables - check for dev.env first (development), then .env (production)
if os.path.exists(os.path.join(os.path.dirname(__file__), '..', 'dev.env')):
    load_dotenv(os.path.join(os.path.dirname(__file__), '..', 'dev.env'))
else:
    load_dotenv()  # Try default .env file

# Helper function to convert string values to boolean
def str_to_bool(value, default=False):
    """
    Convert string values to boolean.
    Handles various string representations of True/False.
    """
    if value is None:
        return default
    if isinstance(value, bool):
        return value
    if isinstance(value, str):
        return value.lower() in ('true', '1', 'yes', 'on')
    return bool(value)

# Test mode flag for disabling external API calls during tests
TEST_MODE = str_to_bool(os.getenv("TEST_MODE", "False"))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = str_to_bool(os.getenv('DEBUG', 'False'))
DEBUG = True

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')

# Model quota limits
GPT41_AUTH_LIMIT = int(os.getenv('GPT41_AUTH_LIMIT', 5))  # GPT-4.1 per authenticated user / day
GPT41_MINI_GUEST_LIMIT = int(os.getenv('GPT41_MINI_GUEST_LIMIT', 10))  # GPT-4.1-mini per guest / day

# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chefs',
    'meals',
    'events',
    'reviews',
    'custom_auth',
    'qa_app',
    'django_countries',
    'chef_admin',
    'customer_dashboard',
    'local_chefs',
    'gamification',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'stripe',
    'storages',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware', # CORS middleware
]

# CORS Configuration - Handle comma-separated origins from Key Vault
cors_origins_str = os.getenv('CORS_ALLOWED_ORIGINS', '')
if cors_origins_str:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_str.split(',') if origin.strip()]
else:
    # Fallback if no CORS_ALLOWED_ORIGINS set
    CORS_ALLOWED_ORIGINS = [
        os.getenv('STREAMLIT_URL', 'https://sautai.com'),
        'https://hoodunited.org',
        'https://www.hoodunited.org',
        'https://neighborhoodunited.org',
        'https://www.neighborhoodunited.org',
    ]

ROOT_URLCONF = 'hood_united.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'custom_auth.context_processors.role_context_processor',
            ],
        },
    },
]

# WSGI_APPLICATION = 'hood_united.wsgi.application'
# Change from WSGI to ASGI
ASGI_APPLICATION = 'hood_united.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('TEST_DB_NAME'),
            'USER': os.getenv('TEST_DB_USER'),
            'PASSWORD': os.getenv('TEST_DB_PASSWORD'),
            'HOST': os.getenv('TEST_DB_HOST'),
            'PORT': os.getenv('TEST_DB_PORT'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Rest framework settings
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    },
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

SIMPLE_JWT = {
    'ALGORITHM': 'HS256',
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # ... other settings
}


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = os.getenv('LANGUAGE_CODE', 'en-us')

TIME_ZONE = os.getenv('TIME_ZONE', 'UTC')

USE_I18N = True

USE_TZ = str_to_bool(os.getenv('USE_TZ', 'True'))


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Azure Blob Storage Configuration
AZURE_ACCOUNT_NAME = os.getenv('AZURE_ACCOUNT_NAME', 'sautaiblobstorage')
AZURE_ACCOUNT_KEY = os.getenv('AZURE_ACCOUNT_KEY')
AZURE_CONNECTION_STRING = os.getenv('AZURE_CONNECTION_STRING')  # Optional but recommended
AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'

# Static files directories - this applies to both DEBUG and production
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

if DEBUG:
    # Local development settings
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
    
    # Use local storage for development
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
else:
    # Production settings - Azure Blob Storage
    AZURE_MEDIA_CONTAINER = os.getenv('AZURE_CONTAINER', 'media')
    AZURE_STATIC_CONTAINER = os.getenv('AZURE_STATIC_CONTAINER', 'static')
    
    # Media and Static URLs
    MEDIA_URL = f'https://{AZURE_CUSTOM_DOMAIN}/{AZURE_MEDIA_CONTAINER}/'
    STATIC_URL = f'https://{AZURE_CUSTOM_DOMAIN}/{AZURE_STATIC_CONTAINER}/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Still needed for collectstatic
    
    # Modern Django 4.2+ Azure Blob Storage Configuration
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.azure_storage.AzureStorage",
            "OPTIONS": {
                "account_name": AZURE_ACCOUNT_NAME,
                "account_key": AZURE_ACCOUNT_KEY,
                "azure_container": AZURE_MEDIA_CONTAINER,
                "azure_ssl": True,
                "overwrite_files": False,  # Prevents overwriting files with same name
                "location": "",  # Root level of container
                "cache_control": "public,max-age=31536000,immutable",  # 1 year cache
                "object_parameters": {
                    "cache_control": "public,max-age=31536000,immutable",
                }
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.azure_storage.AzureStorage",
            "OPTIONS": {
                "account_name": AZURE_ACCOUNT_NAME,
                "account_key": AZURE_ACCOUNT_KEY,
                "azure_container": AZURE_STATIC_CONTAINER,
                "azure_ssl": True,
                "overwrite_files": True,  # Allow overwriting static files
                "location": "",  # Root level of container
                "cache_control": "public,max-age=31536000,immutable",  # 1 year cache for static files
                "object_parameters": {
                    "cache_control": "public,max-age=31536000,immutable",
                }
            },
        },
    }

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'custom_auth.CustomUser'

AUTHENTICATION_BACKENDS = [
    'custom_auth.backends.CaseInsensitiveAuthBackend', # Custom backend
    'django.contrib.auth.backends.ModelBackend',  # Default backend
]


# Login redirects
LOGIN_REDIRECT_URL = 'custom_auth:profile'
LOGIN_URL = 'custom_auth:login'


# OpenAI API keys
# OpenAI API keys
OPENAI_KEY = os.getenv('OPENAI_KEY')
SPOONACULAR_API_KEY = os.getenv('SPOONACULAR_API_KEY')

# OpenAI prompt
OPENAI_PROMPT = os.getenv('OPENAI_PROMPT')

# Stripe API keys
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET') #TODO: Add this to the config file


# Email settings
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = str_to_bool(os.getenv('EMAIL_USE_TLS', 'True'))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')


# Redis connection details
REDIS_URL = os.getenv('REDIS_URL')
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')

DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True
DJANGO_REDIS_LOGGER = 'django.request'

# Configure different cache backends for development vs production
if DEBUG:
    # Development: Use local memory cache (no Redis required)
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }
else:
    # Production: Use Redis with SSL
    RAW_REDIS_URL = os.getenv("REDIS_URL", "").strip()

    if not RAW_REDIS_URL:
        raise RuntimeError("REDIS_URL is not set")

    if not RAW_REDIS_URL.startswith("rediss://"):
        # assume host[:port][/db]   →  prepend scheme & default port/db
        RAW_REDIS_URL = f"rediss://{RAW_REDIS_URL}:6380/0"

    # Append SSL flag only once
    if "ssl_cert_reqs=" not in RAW_REDIS_URL:
        RAW_REDIS_URL = RAW_REDIS_URL + "?ssl_cert_reqs=required"

    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": RAW_REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # password is already embedded in the URL; no need for extra key
                "SOCKET_CONNECT_TIMEOUT": 15,
                "SOCKET_TIMEOUT": 15,
                "RETRY_ON_TIMEOUT": True,
                "SOCKET_KEEPALIVE": True,
            },
        }
    }

# Celery settings
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_REDIS_MAX_CONNECTIONS = 10
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': 3600,  # Task visibility timeout
    'ssl': {
        'ssl_cert_reqs': 'required',  # You can also set this to 'CERT_OPTIONAL' or 'CERT_NONE'
        'ssl_ca_certs': '/etc/ssl/certs/ca-certificates.crt',  # Path to your CA certificates
    }
}
CELERYD_LOG_FILE = "/var/log/celery/celery.log"
CELERYD_LOG_LEVEL = "DEBUG"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',  # Use FileHandler instead of RotatingFileHandler
            'filename': os.path.join(BASE_DIR, 'django_warnings.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'customer_dashboard': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django_redis': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'celery': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
# Environment-aware security settings
IS_PRODUCTION = not DEBUG and not TEST_MODE

if IS_PRODUCTION:
    # Production-only security settings
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_TRUSTED_ORIGINS = [
        'https://sautai.azurewebsites.net',
        'https://www.sautai.com',
        'https://sautai.com',
        'https://*.127.0.0.1'
    ]

    # HSTS (HTTP Strict Transport Security)
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

    # SSL redirect - ONLY in production
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    # Development/Testing settings - NO SSL enforcement
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0

    # Clickjacking Protection
    X_FRAME_OPTIONS = 'DENY'

    # Other security settings
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

# Webhook URL for n8n order events
N8N_ORDER_EVENTS_WEBHOOK_URL = os.getenv('N8N_ORDER_EVENTS_WEBHOOK_URL', '')

# Webhook URL for n8n traceback
N8N_TRACEBACK_URL = os.getenv('N8N_TRACEBACK_URL', '')